Local Compilation
-----------------

Perquisites
***********

For the local compilation you need to install LSL on your local machine. On Ubuntu and other
Debian-based machines you can do this by downloading and installing the latest release of `Liblsl <https://github.com/sccn/liblsl/releases>`__.
The filenames refer to Ubuntu versions (e.g. :code:`liblsl-1.13.1-Linux64-bionic.deb` is for Ubuntu
18.04 - Bionic Beaver).
For other Unix machines you need to manually extract the files and place them in the correct system
directories (probably :file:`/usr/`.

Compilation
***********

You can compile the LuckyLoop application locally by running :code:`make`
from the LuckyLoop root folder.

Cross Compilation
-----------------

Perquisites
***********

The application runs on a `Toradex Colibri iMX7 board <https://www.toradex.com/de/computer-on-modules/colibri-arm-family/nxp-freescale-imx7?gclid=CjwKCAiA4Y7yBRB8EiwADV1haV1e3yBTc93Qu7B6biJ9D3EML4jhz6fik-Q_m5JxnOyBqXRLHSTAYhoCHTUQAvD_BwE>`_.

For cross-compilation, you need to setup the respective crosscompilation toolchain.
Follow the steps as outlined by toradex `here <https://developer.toradex.com/getting-started/module-2-my-first-hello-world-in-c/configure-toolchain-colibri-imx7?som=colibri-imx7&board=colibri-evaluation-board&os=linux>`_.

Then download and unzip the `liblsl32.so <https://github.com/nC-Loop/Lucky/releases/tag/v0.0.4>`__ an
place it in :file:`_build/`

Compilation
***********

You can compile the LuckyLoop application for the device by running :code:`make cross`
from the LuckyLoop root folder.
